import 'package:flutter/material.dart';
import '../../shared/constants/app_colors.dart';

/// Î¶¨Í∑∏ Ìã∞Ïñ¥
enum LeagueTier {
  bronze('Î∏åÎ°†Ï¶à', 'ü•â', AppColors.mathOrange, 0),
  silver('Ïã§Î≤Ñ', 'ü•à', Color(0xFFC0C0C0), 100),
  gold('Í≥®Îìú', 'ü•á', AppColors.mathYellow, 500),
  diamond('Îã§Ïù¥ÏïÑ', 'üíé', Color(0xFF00BCD4), 1000);

  const LeagueTier(this.displayName, this.emoji, this.color, this.xpThreshold);

  final String displayName;
  final String emoji;
  final Color color;
  final int xpThreshold; // Ìï¥Îãπ Î¶¨Í∑∏ ÏßÑÏûÖÏóê ÌïÑÏöîÌïú XP

  /// XPÎ°úÎ∂ÄÌÑ∞ Î¶¨Í∑∏ Ìã∞Ïñ¥ Í≥ÑÏÇ∞
  static LeagueTier fromXP(int xp) {
    if (xp >= LeagueTier.diamond.xpThreshold) {
      return LeagueTier.diamond;
    } else if (xp >= LeagueTier.gold.xpThreshold) {
      return LeagueTier.gold;
    } else if (xp >= LeagueTier.silver.xpThreshold) {
      return LeagueTier.silver;
    } else {
      return LeagueTier.bronze;
    }
  }

  /// Îã§Ïùå Ìã∞Ïñ¥
  LeagueTier? get nextTier {
    final currentIndex = LeagueTier.values.indexOf(this);
    if (currentIndex < LeagueTier.values.length - 1) {
      return LeagueTier.values[currentIndex + 1];
    }
    return null; // Ïù¥ÎØ∏ ÏµúÍ≥† Ìã∞Ïñ¥
  }

  /// Îã§Ïùå Ìã∞Ïñ¥ÍπåÏßÄ ÌïÑÏöîÌïú XP
  int xpToNextTier(int currentXP) {
    final next = nextTier;
    if (next == null) return 0; // Ïù¥ÎØ∏ ÏµúÍ≥† Ìã∞Ïñ¥
    return next.xpThreshold - currentXP;
  }

  /// ÌòÑÏû¨ Ìã∞Ïñ¥ ÎÇ¥ ÏßÑÌñâÎ•† (0.0 ~ 1.0)
  double progressInTier(int currentXP) {
    final next = nextTier;
    if (next == null) return 1.0; // ÏµúÍ≥† Ìã∞Ïñ¥Îäî Ìï≠ÏÉÅ 100%

    final tierStart = xpThreshold;
    final tierEnd = next.xpThreshold;
    final progress = (currentXP - tierStart) / (tierEnd - tierStart);

    return progress.clamp(0.0, 1.0);
  }

  /// Í∑∏ÎùºÎîîÏñ∏Ìä∏ ÏÉâÏÉÅ
  List<Color> get gradientColors {
    switch (this) {
      case LeagueTier.bronze:
        return [Color(0xFFCD7F32), Color(0xFFB8692D)];
      case LeagueTier.silver:
        return [Color(0xFFC0C0C0), Color(0xFFA8A8A8)];
      case LeagueTier.gold:
        return [Color(0xFFFFD700), Color(0xFFFFA500)];
      case LeagueTier.diamond:
        return [Color(0xFF00BCD4), Color(0xFF0097A7)];
    }
  }
}

/// Î¶¨Í∑∏ Ï†ïÎ≥¥
class LeagueInfo {
  final LeagueTier tier;
  final int currentXP;
  final int rank; // Î¶¨Í∑∏ ÎÇ¥ ÏàúÏúÑ
  final int totalPlayers; // Î¶¨Í∑∏ ÎÇ¥ Ï¥ù ÌîåÎ†àÏù¥Ïñ¥ Ïàò

  const LeagueInfo({
    required this.tier,
    required this.currentXP,
    required this.rank,
    required this.totalPlayers,
  });

  /// Îã§Ïùå Ìã∞Ïñ¥ÍπåÏßÄ ÎÇ®ÏùÄ XP
  int get xpToNextTier => tier.xpToNextTier(currentXP);

  /// ÌòÑÏû¨ Ìã∞Ïñ¥ ÎÇ¥ ÏßÑÌñâÎ•†
  double get progressInTier => tier.progressInTier(currentXP);

  /// ÏÉÅÏúÑ % Í≥ÑÏÇ∞
  double get topPercentage => (rank / totalPlayers) * 100;

  /// ÏäπÍ∏â Í∞ÄÎä• Ïó¨Î∂Ä (ÏÉÅÏúÑ 20% Ïù¥ÎÇ¥)
  bool get canPromote => topPercentage <= 20.0;

  /// Í∞ïÎì± ÏúÑÌóò Ïó¨Î∂Ä (ÌïòÏúÑ 20% Ïù¥ÎÇ¥)
  bool get relegationRisk => topPercentage >= 80.0;

  factory LeagueInfo.fromJson(Map<String, dynamic> json) {
    return LeagueInfo(
      tier: LeagueTier.values.firstWhere(
        (t) => t.name == json['tier'],
        orElse: () => LeagueTier.bronze,
      ),
      currentXP: json['currentXP'] as int,
      rank: json['rank'] as int,
      totalPlayers: json['totalPlayers'] as int,
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'tier': tier.name,
      'currentXP': currentXP,
      'rank': rank,
      'totalPlayers': totalPlayers,
    };
  }

  LeagueInfo copyWith({
    LeagueTier? tier,
    int? currentXP,
    int? rank,
    int? totalPlayers,
  }) {
    return LeagueInfo(
      tier: tier ?? this.tier,
      currentXP: currentXP ?? this.currentXP,
      rank: rank ?? this.rank,
      totalPlayers: totalPlayers ?? this.totalPlayers,
    );
  }
}
