import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../shared/constants/app_colors.dart';
import '../../shared/constants/app_text_styles.dart';
import '../../shared/constants/app_dimensions.dart';
import '../../shared/widgets/responsive_wrapper.dart';
import '../../shared/widgets/fade_in_widget.dart';
import '../../data/models/models.dart';
import '../../data/providers/user_provider.dart';
import '../../data/providers/problem_provider.dart';
import '../../data/providers/error_note_provider.dart';
import '../../data/providers/achievement_provider.dart';
import 'widgets/problem_option_button.dart';
import 'widgets/problem_result_dialog.dart';
import 'widgets/xp_gain_animation.dart';

/// Î¨∏Ï†ú ÌíÄÏù¥ ÌôîÎ©¥
/// Ïã§Ï†ú Problem Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò, Í≤ΩÌóòÏπò/Î±ÉÏßÄ ÏãúÏä§ÌÖú ÌÜµÌï©
class ProblemScreen extends ConsumerStatefulWidget {
  final String lessonId;
  final List<Problem> problems;

  const ProblemScreen({
    super.key,
    required this.lessonId,
    required this.problems,
  });

  @override
  ConsumerState<ProblemScreen> createState() => _ProblemScreenState();
}

class _ProblemScreenState extends ConsumerState<ProblemScreen>
    with SingleTickerProviderStateMixin {
  // ÌòÑÏû¨ ÏÉÅÌÉú
  int _currentProblemIndex = 0;
  int? _selectedAnswerIndex;
  bool _isAnswerSubmitted = false;
  bool _isCorrect = false;

  // ÏÑ∏ÏÖò ÌÜµÍ≥Ñ
  int _totalCorrect = 0;
  int _totalXPEarned = 0;
  final List<ProblemResult> _results = [];

  // Ïï†ÎãàÎ©îÏù¥ÏÖò
  late AnimationController _transitionController;
  late Animation<double> _fadeAnimation;
  late Animation<Offset> _slideAnimation;

  @override
  void initState() {
    super.initState();
    _setupAnimations();
  }

  void _setupAnimations() {
    _transitionController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _transitionController,
        curve: Curves.easeInOut,
      ),
    );

    _slideAnimation = Tween<Offset>(
      begin: const Offset(0.3, 0),
      end: Offset.zero,
    ).animate(
      CurvedAnimation(
        parent: _transitionController,
        curve: Curves.easeOutCubic,
      ),
    );

    _transitionController.forward();
  }

  @override
  void dispose() {
    _transitionController.dispose();
    super.dispose();
  }

  Problem get _currentProblem => widget.problems[_currentProblemIndex];
  double get _progress => (_currentProblemIndex + 1) / widget.problems.length;
  bool get _isLastProblem => _currentProblemIndex == widget.problems.length - 1;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.mathBlue,
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: AppColors.mathBlueGradient,
          ),
        ),
        child: SafeArea(
          child: ResponsiveWrapper(
            child: Column(
              children: [
                _buildHeader(),
                Expanded(
                  child: FadeTransition(
                    opacity: _fadeAnimation,
                    child: SlideTransition(
                      position: _slideAnimation,
                      child: _buildContent(),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  /// Ìó§Îçî (Îí§Î°úÍ∞ÄÍ∏∞ + ÏßÑÌñâÎ•† + XP)
  Widget _buildHeader() {
    final user = ref.watch(userProvider);

    return Container(
      padding: const EdgeInsets.all(AppDimensions.paddingL),
      child: Column(
        children: [
          // Îí§Î°úÍ∞ÄÍ∏∞ + XP
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              IconButton(
                icon: const Icon(Icons.close, color: Colors.white, size: 28),
                onPressed: () => _showExitDialog(),
              ),
              Container(
                padding: const EdgeInsets.symmetric(
                  horizontal: AppDimensions.paddingM,
                  vertical: AppDimensions.paddingS,
                ),
                decoration: BoxDecoration(
                  color: Colors.white.withValues(alpha: 0.2),
                  borderRadius: BorderRadius.circular(AppDimensions.radiusL),
                ),
                child: Row(
                  children: [
                    Text(
                      'üî∂',
                      style: const TextStyle(fontSize: 20),
                    ),
                    const SizedBox(width: AppDimensions.spacingS),
                    Text(
                      '${user?.xp ?? 0} XP',
                      style: AppTextStyles.titleMedium.copyWith(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: AppDimensions.spacingM),
          // ÏßÑÌñâÎ•† Î∞î
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Î¨∏Ï†ú ${_currentProblemIndex + 1}/${widget.problems.length}',
                    style: AppTextStyles.bodyMedium.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                  Text(
                    '${(_progress * 100).round()}%',
                    style: AppTextStyles.bodyMedium.copyWith(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: AppDimensions.spacingS),
              ClipRRect(
                borderRadius: BorderRadius.circular(AppDimensions.radiusM),
                child: TweenAnimationBuilder<double>(
                  duration: const Duration(milliseconds: 500),
                  curve: Curves.easeOutCubic,
                  tween: Tween(begin: 0.0, end: _progress),
                  builder: (context, value, child) {
                    return LinearProgressIndicator(
                      value: value,
                      backgroundColor: Colors.white.withValues(alpha: 0.3),
                      valueColor: const AlwaysStoppedAnimation(Colors.white),
                      minHeight: 8,
                    );
                  },
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// Î©îÏù∏ ÏΩòÌÖêÏ∏†
  Widget _buildContent() {
    return Container(
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: Radius.circular(30),
          topRight: Radius.circular(30),
        ),
      ),
      child: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(AppDimensions.paddingXL),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildCategoryBadge(),
                  const SizedBox(height: AppDimensions.spacingL),
                  _buildQuestionText(),
                  const SizedBox(height: AppDimensions.spacingXXL),
                  _buildOptions(),
                  if (_isAnswerSubmitted) ...[
                    const SizedBox(height: AppDimensions.spacingXL),
                    _buildExplanation(),
                  ],
                ],
              ),
            ),
          ),
          _buildBottomButton(),
        ],
      ),
    );
  }

  /// Ïπ¥ÌÖåÍ≥†Î¶¨ Î±ÉÏßÄ
  Widget _buildCategoryBadge() {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: AppDimensions.paddingM,
        vertical: AppDimensions.paddingS,
      ),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: AppColors.mathButtonGradient,
        ),
        borderRadius: BorderRadius.circular(AppDimensions.radiusL),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            _currentProblem.typeIcon,
            style: const TextStyle(fontSize: 18),
          ),
          const SizedBox(width: AppDimensions.spacingS),
          Text(
            _currentProblem.category,
            style: AppTextStyles.bodyMedium.copyWith(
              color: Colors.white,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(width: AppDimensions.spacingS),
          Container(
            padding: const EdgeInsets.symmetric(
              horizontal: 8,
              vertical: 2,
            ),
            decoration: BoxDecoration(
              color: Colors.white.withValues(alpha: 0.3),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Text(
              '+${_currentProblem.xpReward} XP',
              style: AppTextStyles.bodySmall.copyWith(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// Î¨∏Ï†ú ÌÖçÏä§Ìä∏
  Widget _buildQuestionText() {
    return FadeInWidget(
      child: Text(
        _currentProblem.question,
        style: AppTextStyles.headlineMedium.copyWith(
          fontWeight: FontWeight.bold,
          height: 1.4,
        ),
      ),
    );
  }

  /// ÏÑ†ÌÉùÏßÄ
  Widget _buildOptions() {
    if (_currentProblem.options == null) return const SizedBox();

    return Column(
      children: List.generate(
        _currentProblem.options!.length,
        (index) {
          final isCorrectAnswer = _currentProblem.correctAnswerIndex == index;

          return FadeInWidget(
            delay: Duration(milliseconds: 100 * index),
            child: Padding(
              padding: const EdgeInsets.only(bottom: AppDimensions.spacingM),
              child: ProblemOptionButton(
                optionText: _currentProblem.options![index],
                index: index,
                selectedIndex: _selectedAnswerIndex,
                isAnswerSubmitted: _isAnswerSubmitted,
                isCorrectAnswer: isCorrectAnswer,
                onTap: () => _selectAnswer(index),
              ),
            ),
          );
        },
      ),
    );
  }

  /// Ìï¥ÏÑ§
  Widget _buildExplanation() {
    return FadeInWidget(
      child: Container(
        padding: const EdgeInsets.all(AppDimensions.paddingL),
        decoration: BoxDecoration(
          color: _isCorrect
              ? AppColors.successGreen.withValues(alpha: 0.1)
              : AppColors.warningOrange.withValues(alpha: 0.1),
          borderRadius: BorderRadius.circular(AppDimensions.radiusL),
          border: Border.all(
            color: _isCorrect
                ? AppColors.successGreen.withValues(alpha: 0.3)
                : AppColors.warningOrange.withValues(alpha: 0.3),
            width: 2,
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text(
                  _isCorrect ? '‚úÖ' : 'üí°',
                  style: const TextStyle(fontSize: 24),
                ),
                const SizedBox(width: AppDimensions.spacingS),
                Text(
                  _isCorrect ? 'Ï†ïÎãµÏûÖÎãàÎã§!' : 'Îã§Ïãú ÌïúÎ≤à ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî',
                  style: AppTextStyles.titleLarge.copyWith(
                    color: _isCorrect ? AppColors.successGreen : AppColors.warningOrange,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppDimensions.spacingM),
            Text(
              _currentProblem.explanation,
              style: AppTextStyles.bodyMedium.copyWith(
                height: 1.6,
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// ÌïòÎã® Î≤ÑÌäº
  Widget _buildBottomButton() {
    return Container(
      padding: const EdgeInsets.all(AppDimensions.paddingL),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.05),
            blurRadius: 10,
            offset: const Offset(0, -2),
          ),
        ],
      ),
      child: SafeArea(
        top: false,
        child: SizedBox(
          width: double.infinity,
          child: ElevatedButton(
            onPressed: _getButtonAction(),
            style: ElevatedButton.styleFrom(
              backgroundColor: _getButtonColor(),
              padding: const EdgeInsets.symmetric(vertical: AppDimensions.paddingL),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(AppDimensions.radiusL),
              ),
              elevation: 0,
            ),
            child: Text(
              _getButtonText(),
              style: AppTextStyles.titleLarge.copyWith(
                color: Colors.white,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ),
    );
  }

  VoidCallback? _getButtonAction() {
    if (!_isAnswerSubmitted && _selectedAnswerIndex == null) {
      return null; // ÎãµÏùÑ ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏúºÎ©¥ ÎπÑÌôúÏÑ±Ìôî
    }
    if (!_isAnswerSubmitted) {
      return _submitAnswer;
    }
    if (_isLastProblem) {
      return _showResults;
    }
    return _nextProblem;
  }

  Color _getButtonColor() {
    if (_isAnswerSubmitted) {
      return _isCorrect ? AppColors.successGreen : AppColors.mathButtonBlue;
    }
    if (_selectedAnswerIndex == null) {
      return AppColors.disabled;
    }
    return AppColors.mathButtonBlue;
  }

  String _getButtonText() {
    if (!_isAnswerSubmitted) {
      return 'Ï†úÏ∂ú';
    }
    if (_isLastProblem) {
      return 'Í≤∞Í≥º ÌôïÏù∏';
    }
    return 'Îã§Ïùå Î¨∏Ï†ú';
  }

  /// Îãµ ÏÑ†ÌÉù
  void _selectAnswer(int index) {
    setState(() {
      _selectedAnswerIndex = index;
    });
  }

  /// Îãµ Ï†úÏ∂ú
  void _submitAnswer() async {
    if (_selectedAnswerIndex == null) return;

    final user = ref.read(userProvider);
    final userId = user?.id ?? 'user001';

    _isCorrect = _currentProblem.isCorrectAnswer(_selectedAnswerIndex!);

    setState(() {
      _isAnswerSubmitted = true;
    });

    // Í≤∞Í≥º Ï†ÄÏû•
    final result = ProblemResult(
      problemId: _currentProblem.id,
      userId: userId,
      selectedAnswerIndex: _selectedAnswerIndex,
      isCorrect: _isCorrect,
      solvedAt: DateTime.now(),
      timeSpentSeconds: 30, // TODO: Ïã§Ï†ú ÏãúÍ∞Ñ Ï∏°Ï†ï
      xpEarned: _isCorrect ? _currentProblem.xpReward : 0,
    );

    _results.add(result);
    await ref.read(problemResultsProvider.notifier).addResult(result);

    if (_isCorrect) {
      // Ï†ïÎãµ: XP ÌöçÎìù
      _totalCorrect++;
      _totalXPEarned += _currentProblem.xpReward;

      // ÏÇ¨Ïö©Ïûê XP ÏóÖÎç∞Ïù¥Ìä∏
      await ref.read(userProvider.notifier).addXP(_currentProblem.xpReward);

      // XP ÌöçÎìù Ïï†ÎãàÎ©îÏù¥ÏÖò ÌëúÏãú
      if (mounted) {
        _showXPGainAnimation(_currentProblem.xpReward);
      }

      // Î±ÉÏßÄ Ïñ∏ÎùΩ Ï≤¥ÌÅ¨
      _checkAchievements();
    } else {
      // Ïò§Îãµ: Ïò§Îãµ ÎÖ∏Ìä∏Ïóê Ï†ÄÏû•
      await ref.read(errorNoteProvider.notifier).addErrorNote(
            userId: userId,
            problem: _currentProblem,
            userAnswer: _currentProblem.options![_selectedAnswerIndex!],
          );
    }
  }

  /// XP ÌöçÎìù Ïï†ÎãàÎ©îÏù¥ÏÖò
  void _showXPGainAnimation(int xp) {
    showXPGainAnimation(context, xp);
  }

  /// Î±ÉÏßÄ Ïñ∏ÎùΩ Ï≤¥ÌÅ¨
  void _checkAchievements() {
    // TODO: Î±ÉÏßÄ Ïñ∏ÎùΩ Ï≤¥ÌÅ¨ Î∞è ÏïåÎ¶º
    final achievements = ref.read(achievementProvider);

    // ÏòàÏãú: Ï≤´ Î¨∏Ï†ú ÌíÄÍ∏∞ Î±ÉÏßÄ
    if (_totalCorrect == 1) {
      final firstProblemAchievement = achievements.firstWhere(
        (a) => a.id == 'achievement001',
        orElse: () => achievements.first,
      );

      if (!firstProblemAchievement.isUnlocked) {
        _showAchievementUnlocked(firstProblemAchievement);
      }
    }
  }

  /// Î±ÉÏßÄ Ïñ∏ÎùΩ ÏïåÎ¶º
  void _showAchievementUnlocked(Achievement achievement) {
    // TODO: Î±ÉÏßÄ Ïñ∏ÎùΩ Ïï†ÎãàÎ©îÏù¥ÏÖò Íµ¨ÌòÑ
  }

  /// Îã§Ïùå Î¨∏Ï†ú
  void _nextProblem() async {
    setState(() {
      _currentProblemIndex++;
      _selectedAnswerIndex = null;
      _isAnswerSubmitted = false;
      _isCorrect = false;
    });

    // Ï†ÑÌôò Ïï†ÎãàÎ©îÏù¥ÏÖò
    await _transitionController.reverse();
    await _transitionController.forward();
  }

  /// Í≤∞Í≥º ÌôïÏù∏
  void _showResults() {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => ProblemResultDialog(
        lessonTitle: 'Í∏∞Ï¥à ÏÇ∞Ïà†',
        results: _results,
        totalXPEarned: _totalXPEarned,
        onComplete: () {
          Navigator.of(context).pop(); // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
          Navigator.of(context).pop(); // ProblemScreen Îã´Í∏∞
        },
        onRetry: () {
          Navigator.of(context).pop(); // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
          _resetProblemSet(); // Î¨∏Ï†ú ÏÑ∏Ìä∏ Î¶¨ÏÖã
        },
      ),
    );
  }

  /// ÎÇòÍ∞ÄÍ∏∞ Îã§Ïù¥ÏñºÎ°úÍ∑∏
  void _showExitDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(AppDimensions.radiusXL),
        ),
        title: Row(
          children: [
            Text('‚ö†Ô∏è', style: const TextStyle(fontSize: 24)),
            const SizedBox(width: AppDimensions.spacingS),
            Text(
              'ÌïôÏäµ Ï§ëÎã®',
              style: AppTextStyles.headlineSmall.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        content: Text(
          'Ï†ïÎßê ÎÇòÍ∞ÄÏãúÍ≤†ÏäµÎãàÍπå?\n\nÌòÑÏû¨ÍπåÏßÄÏùò ÏßÑÌñâ ÏÉÅÌô©ÏùÄ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏäµÎãàÎã§.',
          style: AppTextStyles.bodyMedium.copyWith(
            color: AppColors.textSecondary,
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text(
              'Í≥ÑÏÜçÌïòÍ∏∞',
              style: AppTextStyles.titleMedium.copyWith(
                color: AppColors.mathButtonBlue,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          TextButton(
            onPressed: () {
              Navigator.of(context).pop(); // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Í∏∞
              Navigator.of(context).pop(); // ProblemScreen Îã´Í∏∞
            },
            child: Text(
              'ÎÇòÍ∞ÄÍ∏∞',
              style: AppTextStyles.titleMedium.copyWith(
                color: AppColors.errorRed,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// Î¨∏Ï†ú ÏÑ∏Ìä∏ Î¶¨ÏÖã (Îã§Ïãú ÌíÄÍ∏∞Ïö©)
  void _resetProblemSet() {
    setState(() {
      _currentProblemIndex = 0;
      _selectedAnswerIndex = null;
      _isAnswerSubmitted = false;
      _isCorrect = false;
      _totalCorrect = 0;
      _totalXPEarned = 0;
      _results.clear();
    });
    _transitionController.reset();
    _transitionController.forward();
  }
}
