import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../shared/constants/constants.dart';
import '../../shared/constants/game_constants.dart';
import '../../shared/utils/utils.dart';
import '../../shared/widgets/layout/lesson_path_widget.dart';
import '../../shared/widgets/indicators/loading_widgets.dart';
import '../../shared/utils/haptic_feedback.dart';
import '../../data/models/models.dart';
import '../../data/providers/user_provider.dart';
import '../../data/providers/problem_provider.dart';
import '../problem/problem_screen.dart';

/// ÎìÄÏò§ÎßÅÍ≥† Ïä§ÌÉÄÏùº Ìôà ÌôîÎ©¥
/// SÏûê Í≥°ÏÑ† Î†àÏä® Í≤ΩÎ°ú Ï†ÅÏö©
class HomeScreen extends ConsumerWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final user = ref.watch(userProvider);
    final problems = ref.watch(problemProvider);

    if (user == null) {
      return Scaffold(
        backgroundColor: AppColors.mathBlue,
        body: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topCenter,
              end: Alignment.bottomCenter,
              colors: AppColors.mathBlueGradient,
            ),
          ),
          child: const Center(
            child: DuolingoLoadingIndicator(
              message: 'ÏàòÌïô ÌïôÏäµÏùÑ Ï§ÄÎπÑÌïòÍ≥† ÏûàÏñ¥Ïöî...',
              size: 80,
              color: AppColors.mathYellow,
            ),
          ),
        ),
      );
    }

    return Scaffold(
      backgroundColor: AppColors.background, // GoMath Î∞∞Í≤ΩÏÉâ
      body: Column(
        children: [
          _buildHeader(user),
          Expanded(
            child: LessonPathWidget(
              lessons: _generateLessons(user),
              onLessonTap: (lesson) => _handleLessonTap(context, ref, lesson, problems),
            ),
          ),
        ],
      ),
    );
  }

  /// ÎìÄÏò§ÎßÅÍ≥† Ïä§ÌÉÄÏùº Ìó§Îçî (Í∞úÏÑ†Îêú ÎîîÏûêÏù∏)
  Widget _buildHeader(User user) {
    return SafeArea(
      bottom: false,
      child: Container(
        padding: const EdgeInsets.fromLTRB(
          AppDimensions.paddingL,
          AppDimensions.paddingL,
          AppDimensions.paddingL,
          AppDimensions.paddingL + 4,
        ),
        decoration: BoxDecoration(
          color: AppColors.surface,
          boxShadow: [
            BoxShadow(
              color: AppColors.borderLight.withValues(alpha: 0.5),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        clipBehavior: Clip.none, // Î≥Ñ/Ïõê Ïß§Î¶º Î∞©ÏßÄ
        child: Column(
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
                Expanded(
                  child: Row(
                    children: [
                      // ÌîÑÎ°úÌïÑ ÏïÑÎ∞îÌÉÄ (Îçî ÌÅ¨Í≤å)
                      Container(
                        width: 56,
                        height: 56,
                        decoration: BoxDecoration(
                          gradient: const LinearGradient(
                            colors: AppColors.blueGradient,
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          shape: BoxShape.circle,
                          boxShadow: [
                            BoxShadow(
                              color: AppColors.mathBlue.withValues(alpha: 0.3),
                              blurRadius: 8,
                              offset: const Offset(0, 4),
                            ),
                          ],
                        ),
                        child: Center(
                          child: Text(
                            user.name.substring(0, 1).toUpperCase(),
                            style: const TextStyle(
                              color: AppColors.surface,
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(width: AppDimensions.spacingM + 4),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text(
                              user.name,
                              style: const TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                                color: AppColors.textPrimary,
                                letterSpacing: -0.5,
                              ),
                              overflow: TextOverflow.ellipsis,
                              maxLines: 1,
                            ),
                            const SizedBox(height: 4),
                            Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8,
                                vertical: 2,
                              ),
                              decoration: BoxDecoration(
                                color: AppColors.mathTeal.withValues(alpha: 0.15),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Text(
                                'Level ${user.level}',
                                style: TextStyle(
                                  fontSize: 12,
                                  color: AppColors.mathTeal,
                                  fontWeight: FontWeight.bold,
                                  letterSpacing: 0.5,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                // Ïä§Ìä∏Î¶≠ & ÌïòÌä∏ (Ïó¨Î∞± Ï∂îÍ∞Ä)
                Padding(
                  padding: const EdgeInsets.only(left: AppDimensions.spacingS),
                  child: Row(
                    children: [
                      _buildDuoStatBadge('üî•', '${user.streakDays}', AppColors.mathOrange),
                      const SizedBox(width: AppDimensions.spacingS),
                      _buildDuoStatBadge('‚ù§Ô∏è', '${user.hearts}', AppColors.mathRed),
                    ],
                  ),
                ),
              ],
            ),
            const SizedBox(height: AppDimensions.paddingL + 4),
            // XP ÏßÑÌñâÎ•† Î∞î
            _buildDuoProgressBar(user),
          ],
        ),
      ),
    );
  }

  Widget _buildDuoStatBadge(String emoji, String value, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: 10,
        vertical: 6,
      ),
      decoration: BoxDecoration(
        color: AppColors.surface,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppColors.borderLight,
          width: 2,
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(emoji, style: const TextStyle(fontSize: 16)),
          const SizedBox(width: 4),
          Text(
            value,
            style: TextStyle(
              color: color,
              fontWeight: FontWeight.bold,
              fontSize: 15,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildDuoProgressBar(User user) {
    final progress = user.levelProgress;
    final xpNeeded = user.xpToNextLevel;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text(
              'Daily Goal',
              style: TextStyle(
                fontSize: 13,
                color: AppColors.textSecondary,
                fontWeight: FontWeight.w600,
              ),
            ),
            Text(
              '$xpNeeded XP to go',
              style: const TextStyle(
                fontSize: 13,
                color: AppColors.textPrimary,
                fontWeight: FontWeight.bold,
              ),
            ),
          ],
        ),
        const SizedBox(height: 8),
        // ÎìÄÏò§ÎßÅÍ≥† Ïä§ÌÉÄÏùº ÏßÑÌñâÎ•† Î∞î
        Stack(
          children: [
            // Î∞∞Í≤Ω Î∞î
            Container(
              height: 16,
              decoration: BoxDecoration(
                color: AppColors.borderLight,
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            // ÏßÑÌñâ Î∞î (GoMath Ìã∏ ÏÉâÏÉÅ)
            FractionallySizedBox(
              alignment: Alignment.centerLeft,
              widthFactor: progress.clamp(0.05, 1.0), // ÏµúÏÜå 5% ÌëúÏãú
              child: Container(
                height: 16,
                decoration: BoxDecoration(
                  color: AppColors.mathTeal,
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
            ),
          ],
        ),
      ],
    );
  }

  /// ÏÉòÌîå Î†àÏä® Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ± (Ï∂îÌõÑ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î°ú ÍµêÏ≤¥)
  List<LessonNode> _generateLessons(User user) {
    final currentLevel = user.level;

    return List.generate(20, (index) {
      final lessonNumber = index + 1;
      final isLocked = lessonNumber > currentLevel + 2;
      final isCompleted = lessonNumber < currentLevel;
      final isCurrent = lessonNumber == currentLevel || lessonNumber == currentLevel + 1;

      return LessonNode(
        id: 'lesson_$lessonNumber',
        title: 'Î†àÏä® $lessonNumber',
        emoji: _getLessonEmoji(lessonNumber),
        isLocked: isLocked,
        isCompleted: isCompleted,
        isCurrent: isCurrent && !isCompleted,
        lessonNumber: lessonNumber,
      );
    });
  }

  String _getLessonEmoji(int lessonNumber) {
    const emojis = [
      'üî¢', '‚ûï', '‚ûñ', '‚úñÔ∏è', '‚ûó',
      'üìê', 'üìè', 'üìä', 'üìà', 'üéØ',
      'üßÆ', 'üí°', '‚≠ê', 'üèÜ', 'üéì',
      'üî∂', 'üî∑', 'üî∫', 'üîª', '‚¨õ',
    ];
    return emojis[lessonNumber % emojis.length];
  }

  void _handleLessonTap(
    BuildContext context,
    WidgetRef ref,
    LessonNode lesson,
    List<Problem> problems,
  ) async {
    if (lesson.isLocked) {
      await AppHapticFeedback.error();
      _showCustomSnackBar(
        context,
        'Ïù¥Ï†Ñ Î†àÏä®ÏùÑ Î®ºÏ†Ä ÏôÑÎ£åÌï¥Ï£ºÏÑ∏Ïöî',
        AppColors.duolingoOrange,
      );
      return;
    }

    await AppHapticFeedback.mediumImpact();
    _startLearning(context, ref, lesson, problems);
  }

  void _startLearning(
    BuildContext context,
    WidgetRef ref,
    LessonNode lesson,
    List<Problem> problems,
  ) async {
    Logger.ui('Î†àÏä® ÏãúÏûë', screen: 'HomeScreen', action: 'StartLesson');

    if (problems.isEmpty) {
      Logger.warning('Î¨∏Ï†ú Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå', tag: 'HomeScreen');
      _showCustomSnackBar(
        context,
        'Î¨∏Ï†ú Îç∞Ïù¥ÌÑ∞Î•º Î°úÎìúÌïòÎäî Ï§ëÏûÖÎãàÎã§...',
        AppColors.duolingoOrange,
      );
      return;
    }

    final user = ref.read(userProvider);
    if (user == null) {
      Logger.error('ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå', tag: 'HomeScreen');
      return;
    }

    // ÏÇ¨Ïö©Ïûê Î†àÎ≤®Ïóê ÎßûÎäî Î¨∏Ï†ú Í∞ÄÏ†∏Ïò§Í∏∞
    final recommendedProblems = ref
        .read(problemProvider.notifier)
        .getRecommendedProblems(
          lesson.lessonNumber,
          count: GameConstants.recommendedProblemCount,
        );

    List<Problem> selectedProblems;
    String lessonId;

    if (recommendedProblems.isEmpty) {
      Logger.debug('Í∏∞Î≥∏ Î†àÏä® ÏÇ¨Ïö©', tag: 'HomeScreen');
      final defaultProblems = ref
          .read(problemProvider.notifier)
          .getProblemsByLesson(GameConstants.defaultLessonId);
      selectedProblems = defaultProblems
          .take(GameConstants.recommendedProblemCount)
          .toList();
      lessonId = GameConstants.defaultLessonId;
    } else {
      selectedProblems = recommendedProblems;
      lessonId = lesson.id;
    }

    if (selectedProblems.isEmpty) {
      Logger.error('ÏÑ†ÌÉùÎêú Î¨∏Ï†ú ÏóÜÏùå', tag: 'HomeScreen');
      _showCustomSnackBar(
        context,
        'Î¨∏Ï†úÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.',
        AppColors.duolingoRed,
      );
      return;
    }

    Logger.info('Î¨∏Ï†ú ${selectedProblems.length}Í∞ú ÏÑ†ÌÉù ÏôÑÎ£å', tag: 'HomeScreen');

    try {
      await AppHapticFeedback.success();

      final route = MaterialPageRoute(
        builder: (context) => ProblemScreen(
          lessonId: lessonId,
          problems: selectedProblems,
        ),
      );

      if (context.mounted) {
        await Navigator.of(context).push(route);
        Logger.ui('ÌïôÏäµ ÌôîÎ©¥ Ïù¥Îèô ÏÑ±Í≥µ', screen: 'HomeScreen');
      }
    } catch (e, stackTrace) {
      Logger.error(
        'ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏóêÎü¨',
        error: e,
        stackTrace: stackTrace,
        tag: 'HomeScreen',
      );
      if (context.mounted) {
        _showCustomSnackBar(
          context,
          'ÌéòÏù¥ÏßÄ Ïù¥Îèô Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.',
          AppColors.duolingoRed,
        );
      }
    }
  }

  void _showCustomSnackBar(
    BuildContext context,
    String message,
    Color backgroundColor,
  ) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
          message,
          style: AppTextStyles.bodyMedium.copyWith(
            color: AppColors.surface,
            fontWeight: FontWeight.w500,
          ),
        ),
        backgroundColor: backgroundColor,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(AppDimensions.radiusL),
        ),
        duration: const Duration(seconds: 2),
      ),
    );
  }
}
